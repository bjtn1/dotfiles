return {
  "echasnovski/mini.starter",
  version = false, -- wait till new 0.7.0 release to put it back on semver
  event = "VimEnter",
  opts = function()
    local logo = table.concat({
      "██╗      █████╗ ███████╗██╗   ██╗██╗   ██╗██╗███╗   ███╗          Z",
      "██║     ██╔══██╗╚══███╔╝╚██╗ ██╔╝██║   ██║██║████╗ ████║      Z",
      "██║     ███████║  ███╔╝  ╚████╔╝ ██║   ██║██║██╔████╔██║   z",
      "██║     ██╔══██║ ███╔╝    ╚██╔╝  ╚██╗ ██╔╝██║██║╚██╔╝██║ z",
      "███████╗██║  ██║███████╗   ██║    ╚████╔╝ ██║██║ ╚═╝ ██║",
      "╚══════╝╚═╝  ╚═╝╚══════╝   ╚═╝     ╚═══╝  ╚═╝╚═╝     ╚═╝",
    }, "\n")
    local pad = string.rep(" ", 22)
    local new_section = function(name, action, section)
      return { name = name, action = action, section = pad .. section }
    end

    local starter = require("mini.starter")
    --stylua: ignore
    local config = {
      evaluate_single = true,
      header = logo,
      items = {
        new_section("Find file",    "Telescope find_files", "Telescope"),
        new_section("Recent files", "Telescope oldfiles",   "Telescope"),
        new_section("Grep text",    "Telescope live_grep",  "Telescope"),
        new_section("init.lua",     "e $MYVIMRC",           "Config"),
        new_section("Lazy",         "Lazy",                 "Config"),
        new_section("New file",     "ene | startinsert",    "Built-in"),
        new_section("Quit",         "qa",                   "Built-in"),
      },
      content_hooks = {
        starter.gen_hook.adding_bullet(pad .. "░ ", false),
        starter.gen_hook.aligning("center", "center"),
      },
    }
    return config
  end,
  config = function(_, config)
    -- close Lazy and re-open when starter is ready
    if vim.o.filetype == "lazy" then
      vim.cmd.close()
      vim.api.nvim_create_autocmd("User", {
        pattern = "MiniStarterOpened",
        callback = function()
          require("lazy").show()
        end,
      })
    end

    local starter = require("mini.starter")
    starter.setup(config)

    vim.api.nvim_create_autocmd("User", {
      pattern = "LazyVimStarted",
      callback = function()
        local stats = require("lazy").stats()
        local ms = (math.floor(stats.startuptime * 100 + 0.5) / 100)
        local pad_footer = string.rep(" ", 8)
        starter.config.footer = pad_footer .. "⚡ Neovim loaded " .. stats.count .. " plugins in " .. ms .. "ms"
        pcall(starter.refresh)
      end,
    })
  end,
}
--
-- local hk = {
--   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠟⢉⣉⡉⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⠀⠀⠀⠀⠀⢀⣤⠤⣤⡀⠀⠀⢠⡟⣡⡶⢦⠙⡆⠀⠀⠀⢀⣠⣤⣀⣀⣤⠴⠦⣄⣀⣀⣤⣀⡀⠀⠀⠀⣼⢡⡶⣶⡌⢷⠀⠀⠀⣠⡤⢤⣄⡀⠀⠀⠀⠀⢀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠟⢉⣉⡉⢳⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⢰⣿⠉⠿⢈⣷⡞⡩⣽⣛⣛⠛⠛⢋⣉⣭⠭⠭⢝⣛⠶⢏⡍⡟⣰⢺⡦⢹⡄⠀⠸⡇⢻⣧⣉⣴⠇⠀⠀⢰⡏⣤⢤⡉⡟⣑⣿⣿⡊⡟⢡⠤⣌⢻⠀⠀⠀⠻⣌⣡⣾⡇⣸⠀⠀⢰⡏⣶⡷⡌⡟⣍⡷⢶⣛⠩⠭⠭⣭⣉⡛⠛⢛⣛⣻⡭⢝⢶⣿⠀⠿⢙⣿⠄⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣄⡙⠷⠶⠿⠿⠷⠍⢚⣉⣤⠶⠚⠛⡏⢰⣒⢲⣶⣤⣌⣑⡚⠳⠘⠢⢴⣿⣄⣀⣀⣻⣆⡛⠷⣤⣤⣀⣀⣬⣷⡬⠜⠁⢧⢛⣻⣟⢃⠇⠘⠮⢥⣾⣄⣀⣠⣤⣤⠾⢋⣴⣏⣀⣀⣨⣷⡤⠔⠁⠟⢒⣉⣥⡤⣶⢖⣲⡄⣿⠙⠳⢦⣬⣙⠃⠩⠾⠿⠷⠶⠞⢋⣴⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠛⠒⠒⠒⠛⠛⠉⠉⠀⠀⠀⠀⠙⠦⣥⠾⠁⠀⠀⠉⠙⠛⠲⠶⢦⣤⣬⣭⣉⣉⣉⣉⣀⣀⣀⣬⣤⣤⠴⠶⠾⣏⣣⡷⠭⠵⢾⣘⣹⠷⠶⢦⣤⣤⣄⣀⣀⣈⣉⣉⣉⣉⣭⣥⣤⠴⠶⠞⠛⠋⠉⠀⠀⠘⠦⣭⠶⠋⠀⠀⠀⠀⠉⠙⠛⠛⠒⠒⠚⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⣒⠒⠶⢒⣢⠀⠀⠀⢰⡒⠲⠶⣒⡆⠀⠀⠀⠀⣠⠶⠚⠛⠛⠛⠶⣤⡀⠀⠀⠀⣔⡒⠶⠖⣒⠀⠀⠀⠀⠀⣔⡒⠶⠖⣒⡄⠀⠀⠀⠀⠀⠀⣠⡴⠞⠛⠛⠛⠳⢦⡀⠀⠀⣔⡒⠶⠖⣒⡄⠀⠀⠀⣠⢢⡀⠀⠀⠀⣔⡒⠶⢒⡆⠀⠀⠀⠀⠀⠀⣖⠒⠶⠖⣲⠀⠀⣔⠲⠶⣒⡆⠀⣴⠛⣦⠀⠀⠀⠀⠀⠀⣒⠒⠶⢒⡆⠀⣖⠒⠶⢒⣢⠀⠀⠀⠀⣠⡴⠞⠛⠛⠛⠛⠳⠶⣄⠀⠀⣖⡒⠶⠖⣲⠀⠀⠀⢠⣒⠲⠶⢒⡆⢠⡞⠛⠳⠶⠶⠶⠶⠶⠶⠖⠒⡆⠀⠀",
--   "⠀⠀⠀⢹⡇⠀⢸⠃⠀⠀⠀⠈⢿⠀⠀⣿⠀⠀⠀⢠⡞⢁⡴⠛⠛⠛⢷⣄⠈⠻⣆⠀⠀⠈⣷⠀⢸⡏⠀⠀⠀⠀⠀⠈⣿⠀⢸⡏⠀⠀⠀⠀⠀⢀⡼⠋⣴⠞⠛⠛⠳⣦⠀⠙⣦⠀⠈⢿⡀⠀⣿⠀⠀⠀⢠⡏⠈⣧⠀⠀⠀⢸⡇⢠⡟⠁⠀⠀⠀⠀⠀⠀⠘⣷⠀⢸⡏⠀⢠⡟⢀⡾⠋⠀⠀⣿⠀⠘⢧⡀⠀⠀⠀⠀⠙⣧⠀⣿⠁⠀⢹⡇⠀⣾⠃⠀⠀⢀⡾⠋⣴⠞⠛⠛⠛⠳⣄⠀⣿⠀⠀⠘⣷⠀⢸⡏⠀⠀⠀⠀⢹⡇⠀⣿⠁⢸⢇⡶⠶⠶⣶⠀⢰⡶⠶⣦⡀⡇⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⢸⠀⠀⠀⠀⠀⢸⠀⠀⣿⠀⠀⢠⡟⠀⡾⠁⠀⠀⠀⠀⠹⣆⠀⠹⡆⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢀⡾⠁⣼⠃⠀⠀⠀⠀⠈⣷⠀⠘⣧⠀⢸⡇⠀⢻⡀⠀⠀⣼⠃⠀⢹⡄⠀⠀⣸⠃⣼⠃⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⣠⠟⣠⡟⠁⠀⠀⠀⣿⠀⠀⠈⢷⡀⠀⠀⠀⠀⣿⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⢀⡾⠁⣼⠃⠀⠀⠀⠀⠀⢹⡇⣿⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢸⡇⠀⣿⠀⠈⠚⠁⠀⠀⣿⠀⢸⡇⠀⠘⠃⠃⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⢸⠀⠀⠀⠀⠀⢸⠀⠀⣿⠀⠀⣾⠀⢸⡇⠀⠀⠀⠀⠀⠀⢻⡄⠀⢿⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⣸⠃⢠⡏⠀⠀⠀⠀⠀⠀⠸⡇⠀⢹⡆⠀⣷⠀⢸⡇⠀⢠⡟⢰⡀⠸⣇⠀⠀⣿⢀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⣷⠏⣰⠏⠀⠀⠀⠀⠀⣿⠀⣧⡀⠈⢷⡄⠀⠀⠀⣿⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⣼⠃⢰⡏⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢸⡇⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⠸⠶⠶⠶⠶⠶⠾⠀⠀⣿⠀⢰⡇⠀⣼⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⢸⡇⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⣿⠀⠘⡇⠀⢹⡄⠈⣷⠀⣸⠃⣿⡇⠀⢿⠀⢸⡇⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⠃⣼⠋⠀⠀⠀⠀⠀⠀⣿⠀⣿⢷⡀⠀⢻⡄⠀⠀⣿⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠸⠷⠶⠶⠶⠶⠾⠇⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⢠⡤⠤⠤⠤⠤⣤⠀⠀⣿⠀⢸⡇⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⢸⡇⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⡇⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⡇⠀⠸⡇⠀⢻⣀⡿⢰⡏⣿⠀⠸⡇⣼⠁⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠻⣄⠀⠀⠀⠀⠀⠀⣿⠀⣿⠈⢷⡄⠀⠹⣆⠀⣿⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⡇⠀⢸⡇⠀⠀⠀⠀⢠⡶⠶⠶⢶⡆⠀⠀⣿⠀⢠⣤⠤⠤⠤⠤⣤⡄⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⢸⠀⠀⠀⠀⠀⢸⠀⠀⣿⠀⢸⡇⠀⢸⡆⠀⠀⠀⠀⠀⠀⢠⡏⠀⢸⠇⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⣧⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⣿⠀⢰⡇⠀⠀⣿⠀⢸⣿⠇⣾⠁⢸⡆⠀⣿⡿⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⣆⠀⠹⣆⠀⠀⠀⠀⠀⣿⠀⣿⠀⠀⢻⡄⠀⠹⣦⣿⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⣷⠀⢸⡇⠀⠀⠀⠀⠈⢻⡆⠀⣿⠁⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢸⡇⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⢸⠀⠀⠀⠀⠀⢸⠀⠀⣿⠀⠈⣧⠀⠘⣇⠀⠀⠀⠀⠀⠀⢸⡇⠀⣿⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢿⡀⠀⣷⠀⠀⠀⠀⠀⠀⢀⡿⠀⣼⠃⠀⠀⢸⡆⠀⡿⢰⡏⠀⠀⣷⠀⢸⡇⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⡿⣆⠀⠙⣧⠀⠀⠀⠀⣿⠀⣿⠀⠀⠀⠹⣆⠀⠘⣿⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⢻⡀⠀⢿⡀⠀⠀⠀⠀⢸⡇⠀⣿⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢸⡇⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀",
--   "⠀⠀⠀⢸⡇⠀⢸⠀⠀⠀⠀⠀⢸⠀⠀⣿⠀⠀⢹⡄⠀⢻⡄⠀⠀⠀⠀⠀⣾⠀⣸⠇⠀⠀⣿⠀⢸⡇⠀⠀⢀⣀⡀⠀⣿⠀⢸⡇⠀⠀⢀⡀⡸⣧⠀⠸⣇⠀⠀⠀⠀⠀⣸⠇⢠⡏⠀⠀⠀⠘⣧⠀⠁⣼⠁⠀⠀⢹⡄⠈⢀⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠙⣦⠀⠈⢷⡀⠀⠀⣿⠀⣿⠀⠀⠀⠀⠹⣦⠀⠈⠀⣿⠀⠀⢸⡇⠀⣿⠀⠀⠘⣧⠀⠘⣧⡀⠀⠀⠀⢸⡇⠀⣿⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⢸⡇⠀⣿⠀⠀⠀⠀⠀⠀⣿⠀⢸⡇⠀⠀⠀⠀⠀⠀",
--   '⠀⠀⠀⢸⡇⠀⢸⡆⠀⠀⠀⠀⣼⠀⠀⣿⠀⠀⠀⠻⣄⠀⠹⢦⣀⣀⣠⡾⢃⣴⠋⠀⠀⠀⣿⠀⠸⣧⣄⣠⣾⢹⡇⠀⣿⠀⠸⣧⣄⣠⣼⢱⡇⠙⣦⠀⠙⢷⣄⣀⣀⡴⠋⣰⠟⠀⠀⠀⠀⠀⢿⠀⢠⡟⠀⠀⠀⠈⣧⠀⢸⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡿⠀⢸⡇⠀⠘⢧⡀⠈⠻⣄⡀⣿⠀⢿⡀⠀⠀⠀⠀⠘⢧⡀⠀⣿⠀⠀⢸⡇⠀⢿⡀⠀⠀⠘⢧⡀⠈⠻⣦⣀⣀⣼⡇⠀⣿⠀⠀⢀⡿⠀⢸⡇⠀⠀⠀⠀⢸⡇⠀⣿⡀⠀⠀⠀⠀⢀⡏⠀⢸⡇⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⢞⣣⣤⣈⣛⠆⠀⠀⠰⣛⣠⣄⣙⡳⠀⠀⠀⠙⠷⣤⣀⣉⣉⣩⡴⠟⠁⠀⠀⠀⢸⣣⣤⣤⣄⣈⣉⣀⡼⠃⢸⣫⣤⣤⣄⣈⣉⣀⡼⠃⠀⠈⠳⣦⣀⣈⣉⣉⣴⠞⠁⠀⠀⠀⠀⠀⠀⠸⣇⣼⠃⠀⠀⠀⠀⢻⣄⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢞⣃⣤⣈⣛⠆⠀⠈⠻⣦⣄⣈⣛⣋⣤⣈⣛⠀⠀⠀⠀⠀⠈⢷⣄⡟⠀⠀⣟⣡⣤⣈⣻⠀⠀⠀⠈⠛⢦⣄⣀⣉⣉⣁⣤⠶⠃⠀⠀⢜⣃⣤⣈⣛⡆⠀⠀⠀⣟⣡⣤⣘⣻⠀⠀⠀⠀⢚⣃⣤⣈⣛⡆⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⠀⠈⠉⠁⠀⠀⠀⠀⠀⠀⠈⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢉⣉⣉⠙⢷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢛⣉⡛⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⡀⠀⠀⠀⠀⢠⡶⠒⢶⡴⠶⣛⣛⣛⣓⠶⢤⣴⢞⣫⣭⣭⣝⡳⣦⡤⠶⣚⣛⣛⣛⠶⢦⡶⠒⢶⡄⠀⠀⠀⠀⢀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⢛⣉⡛⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡾⠋⣉⣉⡉⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⣾⡿⢿⣷⠀⣷⠀⢀⡤⠶⢦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡏⢰⣟⡟⢿⠆⣿⠀⠀⠀⠀⢀⣀⣠⣤⠴⠶⠚⣛⣋⣉⣭⣭⠭⠤⣤⣄⡨⢭⣭⣭⣙⡛⠛⠶⠶⣾⣦⣽⠇⣷⡙⣇⣒⣝⢿⣻⠳⢱⣿⣥⣤⣤⣬⣿⡎⠞⣟⡿⣫⣒⣸⢋⣾⠸⣯⣴⣷⠶⠶⠛⢛⣋⣭⣭⡭⢅⣠⣤⠤⠭⣭⣭⣉⣙⣛⠓⠶⠦⣤⣄⣀⡀⠀⠀⠀⠀⣿⠰⡿⢻⣻⡆⢹⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡴⠶⢤⡀⠀⣾⠀⣾⡿⢿⣷⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡀⢻⣷⣄⣀⡴⠏⠀⣾⠰⣟⠗⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣌⠛⠿⠶⠶⠿⠶⠶⠚⣛⣉⣭⣥⣤⣤⣤⣬⣍⣙⠿⡿⢠⡞⢷⠀⣿⠻⣦⠹⣇⠉⠙⠳⣌⠻⣶⣶⠶⢛⡫⠭⢾⣽⣛⣳⣶⢇⣭⠷⠶⠶⠶⠶⠾⣭⡸⣶⣞⣛⣯⡷⠭⢝⡛⠶⣶⣶⠟⣡⠞⠋⠉⣸⠏⣴⠟⣿⠀⡾⢳⡄⢿⠿⣋⣩⣥⣤⣤⣤⣬⣭⣉⣛⠓⠶⠶⠿⠶⠶⠿⠛⣡⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠺⣻⠆⣷⠀⠹⢦⣀⣠⣾⡟⢀⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣄⡙⠻⠷⠤⣤⣤⣼⣧⣝⡻⠷⠶⠦⠤⠴⠶⠶⠶⠞⠛⣛⣉⣭⡍⢲⠆⣠⠶⢿⡛⠉⠁⠀⠀⠀⠀⠀⡼⢛⡻⣷⠘⣌⡻⠶⠾⠿⠚⠛⠀⠛⠓⠶⠶⢼⣷⠈⢿⣦⡻⢄⣏⣷⣝⡻⠵⢹⢸⣧⣤⠤⠤⠤⠤⣤⣼⡇⡏⠮⢟⣫⣾⣹⡸⢟⣴⡿⠁⣾⡧⠶⠶⠚⠛⠀⠛⠓⠿⠷⠶⢟⣡⠃⣾⢟⡛⢧⠀⠀⠀⠀⠀⠈⠉⢛⡿⠶⣄⠰⡖⢩⣭⣉⣛⠛⠳⠶⠶⠶⠦⠤⠴⠶⠾⢟⣫⣼⣧⣤⣤⠤⠾⠟⢋⣠⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠓⠶⠶⠶⠤⣤⣤⣤⣤⣤⣤⠴⠶⠶⠶⠖⠛⠛⠋⠉⠉⠳⣤⠾⣆⡛⠛⣸⠇⠀⠀⠀⠀⠀⠀⠈⣧⠹⢷⠿⢀⡿⢋⡵⢶⣟⠛⠋⠉⠛⢻⡿⠒⠒⢮⣤⣘⡻⠿⣷⣮⣽⣛⣛⣿⣿⣰⡶⠛⠛⠛⠛⠛⠛⢶⢆⣿⣿⣛⣛⣯⣵⣾⠿⢟⣃⣤⡵⠒⠒⢿⡟⠛⠉⠙⠛⣻⡶⢮⡙⢿⡀⠿⡾⠏⣼⠁⠀⠀⠀⠀⠀⠀⠸⣇⠛⢛⣰⠷⣤⠞⠉⠉⠙⠛⠛⠲⠶⠶⠶⠦⣤⣤⣤⣤⣤⣤⠤⠶⠶⠶⠚⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠲⠖⢿⡁⣯⡰⣦⢹⡆⠀⠀⠀⣿⠠⣾⠻⢀⡟⠉⣿⢀⣶⠛⣽⡹⢻⣝⣢⣇⠿⢦⣤⣤⣤⣤⡴⠿⣼⣐⣫⡟⢗⣯⠻⣶⡀⣿⠉⢻⡀⠟⣷⠄⣿⠀⠀⠀⢰⡏⣴⢆⣽⢈⡿⠲⠖⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⣬⣭⣥⠞⠁⠀⠀⠀⠹⣦⣙⣛⣛⣛⣛⣋⣚⣛⣛⠒⠪⠭⢽⣾⣿⣆⠳⣶⣶⣶⣶⠞⣰⣿⣷⡯⠭⠕⠒⣛⣛⣓⣙⣛⣛⣛⣛⣋⣴⠏⠀⠀⠀⠈⠳⣬⣭⣥⠞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⢿⡪⣻⠛⣿⢗⣂⣙⠻⣷⣦⡭⢭⣴⣾⠟⣋⣐⡺⣿⠛⣟⢕⡿⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠁⠀⢻⣘⠞⣸⣷⡙⣇⣚⣓⣸⢋⣾⣇⠳⣃⡟⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣏⠾⢣⣏⠭⠭⣹⡜⠷⣹⠋⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⢻⡷⢮⢻⡟⡵⢾⡟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢧⣉⢾⡷⣉⡼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣏⣹⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
--   '⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀',
-- }
--
-- return {
--   'goolord/alpha-nvim',
--   dependencies = 'nvim-tree/nvim-web-devicons',
--   config = function()
--     local alpha = require('alpha')
--     local db = require('alpha.themes.dashboard')
--
--     db.section.header.val = hk
--
--     db.section.buttons.val = {
--       db.button("f", "Find file", "<CMD>Telescope find_files<CR>"),
--       db.button("n", "New file", "<CMD>ene!<CR>"),
--       db.button("r", "Recent files", "<CMD>Telescope oldfiles <CR>"),
--       db.button("c", "Configuration", "<CMD>edit /Users/bnog/.config/nvim/init.lua<CR>"),
--       db.button("q", "Quit", "<CMD>quit<CR>")
--     }
--
--     db.section.header.opts = {
--       hl = "",
--     }
--
--     alpha.setup(db.config)
--   end
-- }
--
